//20210904
#include<bits/stdc++.h>
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define mp(X,Y) make_pair(X,Y)
#define mt(X,Y) make_tuple(X,Y)
#define mtt(X,Y,Z) make_tuple(X,Y,Z)
#define ll long long
#define sz(v) (int)(v).size()

using namespace std;
const int MAX = 12;
int arr[MAX];
int op[4];
int n ;
int maxValue = INT_MIN;
int minValue = INT_MAX;

int main(void)
{
    fastio;
    cin >> n;
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    for(int i = 0; i < 4; i++)
        cin >> op[i];

    //각각의 연산자 갯수가 남아있다면 DFS 탐색을 한다.
    auto DFS = [&](int plus, int minus, int multiply, int divide, int level, int sum, auto &&DFS) -> void{
        //연산을 다했다면 최대값, 최소값 갱신
        if(level == n){
            maxValue = max(maxValue, sum);
            minValue = min(minValue, sum);
            return ;
        }

        if(plus > 0)
            DFS(plus -1, minus, multiply, divide, level + 1, sum + arr[level], DFS);
        if(minus > 0)
            DFS(plus, minus - 1, multiply, divide, level + 1, sum - arr[level], DFS);
        if(multiply > 0)
            DFS(plus, minus, multiply - 1, divide, level + 1, sum * arr[level], DFS);
        if(divide > 0)
            DFS(plus, minus, multiply, divide - 1, level + 1, sum / arr[level], DFS);
    };

    DFS(op[0], op[1], op[2], op[3], 1, arr[0], DFS);
    cout << maxValue << "\n";
    cout << minValue << "\n";
    return 0;
}

/*
#include<bits/stdc++.h>

using namespace std;

int n;
int number[12];
int op[4];
int maxResult = INT_MIN;
int minResult = INT_MAX;

void DFS(int plus, int minus, int multiply, int divide, int cnt, int sum)
{
	if (cnt == n)
	{
		maxResult = max(maxResult, sum);
		minResult = min(minResult, sum);
	}

	if (plus > 0)
		DFS(plus - 1, minus, multiply, divide, cnt + 1, sum + number[cnt]);
	if (minus > 0)
		DFS(plus, minus - 1, multiply, divide, cnt + 1, sum - number[cnt]);
	if (multiply > 0)
		DFS(plus, minus, multiply - 1, divide, cnt + 1, sum * number[cnt]);
	if (divide > 0)
		DFS(plus, minus, multiply, divide - 1, cnt+1, sum / number[cnt]);
}

int main(void)
{
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> number[i];
	for (int i = 0; i < 4; i++)
		cin >> op[i];

	DFS(op[0], op[1], op[2], op[3], 1, number[0]);
	
	cout << maxResult << "\n";
	cout << minResult << "\n";
	return 0;
}
*/
